#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ (Wildberries)
–ê–≤—Ç–æ—Ä: @MaksimovWB
–ü–µ—Ä–µ–ø–∏—Å–∞–Ω –Ω–∞ aiogram v3
"""

import asyncio
import json
import os
from datetime import datetime

from dotenv import load_dotenv
from html import escape as html_escape
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    WebAppInfo,
    BufferedInputFile,
)
from aiogram.exceptions import TelegramBadRequest

load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
CHANNEL_ID = os.getenv('CHANNEL_ID')

if not TOKEN:
    raise RuntimeError('–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env)')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
router = Router()
dp.include_router(router)


def format_user_info(user) -> dict:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    username = f"@{user.username}" if getattr(user, 'username', None) else "–±–µ–∑ username"
    first_name = getattr(user, 'first_name', '') or ''
    last_name = getattr(user, 'last_name', '') or ''
    full_name = f"{first_name} {last_name}".strip()

    return {
        'id': user.id,
        'username': username,
        'full_name': full_name,
        'display_name': full_name if full_name else username,
    }


async def notify_admin(message_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if ADMIN_CHAT_ID:
        try:
            await bot.send_message(resolve_chat_id(ADMIN_CHAT_ID), message_text)
        except TelegramBadRequest as error:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            try:
                safe_text = html_escape(message_text)
                await bot.send_message(resolve_chat_id(ADMIN_CHAT_ID), safe_text, parse_mode=ParseMode.HTML)
            except Exception as inner_error:
                print(f"Error sending admin notification (fallback failed): {inner_error}")
        except Exception as error:
            print(f"Error sending admin notification: {error}")


async def notify_channel(message_text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª."""
    if CHANNEL_ID:
        try:
            chat_id = resolve_chat_id(CHANNEL_ID)
            if chat_id is None:
                return
            await bot.send_message(chat_id, message_text)
        except Exception as error:
            print(f"Error sending channel notification: {error}")


async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª."""
    if not CHANNEL_ID:
        return True  # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø
    
    try:
        chat_id = resolve_chat_id(CHANNEL_ID)
        if chat_id is None:
            return True
        member = await bot.get_chat_member(chat_id, user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        return member.status in ['member', 'administrator', 'creator']
    except TelegramBadRequest as error:
        # –ß–∞—Å—Ç–∞—è –ø—Ä–∏—á–∏–Ω–∞: –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π CHANNEL_ID
        print(
            "Error checking subscription for user {}: {}. "
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, "
            "–∞ —Ç–∞–∫–∂–µ —á—Ç–æ CHANNEL_ID –∑–∞–¥–∞–Ω –∫–∞–∫ '@username' –∏–ª–∏ '-100...'.".format(user_id, error)
        )
        return False
    except Exception as error:
        print(f"Error checking subscription for user {user_id}: {error}")
        return False  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø


def resolve_chat_id(raw_value: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç chat_id –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ Telegram API –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º—ã:
    - '@username' (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞)
    - '-100xxxxxxxxxx' (–≤–æ–∑–≤—Ä–∞—Ç –∫–∞–∫ int)
    - 'xxxxxxxxxx' (–ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ int, –∏–Ω–∞—á–µ –≤–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫–æ–π)
    """
    if not raw_value:
        return None
    value = raw_value.strip()
    if value.startswith('@'):
        return value
    try:
        return int(value)
    except ValueError:
        return value


@router.message(Command('start'))
async def start_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url="https://t.me/MaksimovWB"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=f"check_sub_{user_id}"
                    )
                ]
            ]
        )
        await message.answer(
            "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏!**\n\n"
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @MaksimovWB\n\n"
            "üìä –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫:\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç—É –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –ü—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö\n"
            "‚Ä¢ –£—á–µ—Ç—É –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ WB\n"
            "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
            "ü§ñ **–°–æ–∑–¥–∞–Ω–æ @MaksimovWB** - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º",
            reply_markup=markup
        )
        return
    
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üßÆ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä",
                    web_app=WebAppInfo(url=WEB_APP_URL or "")
                )
            ]
        ]
    )

    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏!*\n\n"
        "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "üìä *–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:*\n"
        "‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ –ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö (2%, 5%, 7%)\n"
        "‚Ä¢ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã WB (–ª–æ–≥–∏—Å—Ç–∏–∫–∞, –∫–æ–º–∏—Å—Å–∏–∏, —Ö—Ä–∞–Ω–µ–Ω–∏–µ)\n"
        "‚Ä¢ –≠–∫–≤–∞–π—Ä–∏–Ω–≥ –∏ –Ω–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏–µ\n\n"
        "üéØ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\"\n"
        "2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n"
        "4. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n\n"
        "ü§ñ *–°–æ–∑–¥–∞–Ω–æ @MaksimovWB* - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç—ã!"
    )

    await message.answer(welcome_text, reply_markup=markup)

    user_info = format_user_info(message.from_user)
    admin_notification = (
        "üÜï *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_info['display_name']}\n"
        f"üÜî *ID:* `{user_info['id']}`\n"
        f"üì± *Username:* {user_info['username']}\n"
        f"üïê *–í—Ä–µ–º—è:* {message.date.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        "üìä *–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:* –Æ–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∞ WB"
    )
    await notify_admin(admin_notification)


@router.message(Command('help'))
async def help_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url="https://t.me/MaksimovWB"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=f"check_sub_{user_id}"
                    )
                ]
            ]
        )
        await message.answer(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @MaksimovWB",
            reply_markup=markup
        )
        return
    
    help_text = (
        "üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞*\n\n"
        "üìã *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:*\n"
        "‚Ä¢ **–ü—Ä–æ–¥–∞–Ω–æ –µ–¥–∏–Ω–∏—Ü** - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞\n"
        "‚Ä¢ **–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –í–ë** - —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ä—É–±.)\n"
        "‚Ä¢ **–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç** - —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (—Ä—É–±.)\n"
        "‚Ä¢ **–ö–æ–º–∏—Å—Å–∏—è –í–ë** - –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞ (%)\n"
        "‚Ä¢ **–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è –í–ë** - –ø–ª–∞—Ç–∞ –∑–∞ —Ö—Ä–∞–Ω–µ–Ω–∏–µ (—Ä—É–±.)\n"
        "‚Ä¢ **–†–µ–∫–ª–∞–º–∞** - —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ (—Ä—É–±.)\n"
        "‚Ä¢ **–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞** - —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)\n"
        "‚Ä¢ **–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏** - —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ WB (—Ä—É–±.)\n"
        "‚Ä¢ **–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∫—É–ø–∞** - –¥–æ–ª—è –≤—ã–∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (%)\n\n"
        "üìà *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:*\n"
        "‚Ä¢ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ –≤—ã—Ä—É—á–∫–µ\n"
        "‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –ü—Ä–∏–±—ã–ª—å –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö\n\n"
        "üí° *–°–æ–≤–µ—Ç—ã:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–∫—É–ø–∞\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–π—Ç–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–º–∏—Å—Å–∏–π WB\n\n"
        "ü§ñ *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:* @MaksimovWB"
    )

    await message.answer(help_text)


@router.message(Command('stats'))
async def stats_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    is_admin = ADMIN_CHAT_ID and message.from_user and message.from_user.id == int(ADMIN_CHAT_ID)
    if is_admin:
        stats_text = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏*\n\n"
            "ü§ñ *–ë–æ—Ç:* –ê–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
            f"üåê *Web App:* {WEB_APP_URL}\n"
            f"üïê *–í—Ä–µ–º—è:* {message.date.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
            "üìà *–§—É–Ω–∫—Ü–∏–∏:*\n"
            "‚úÖ –†–∞—Å—á–µ—Ç —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏\n"
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚úÖ –ü–ª–∞—Ç–Ω–∞—è –ø—Ä–∏–µ–º–∫–∞\n"
            "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É\n\n"
            "üë®‚Äçüíª *–°–æ–∑–¥–∞–Ω–æ:* [@MaksimovWB](https://t.me/MaksimovWB)"
        )
        await message.answer(stats_text)
    else:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")


@router.message(Command('about'))
async def about_command(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url="https://t.me/MaksimovWB"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=f"check_sub_{user_id}"
                    )
                ]
            ]
        )
        await message.answer(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @MaksimovWB",
            reply_markup=markup
        )
        return
    
    about_text = (
        "‚ÑπÔ∏è *–û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏*\n\n"
        "üéØ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:*\n"
        "–≠—Ç–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ Wildberries —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –Ω–∞–ª–æ–≥–æ–≤.\n\n"
        "üë®‚Äçüíª *–ê–≤—Ç–æ—Ä:*\n"
        "[@MaksimovWB](https://t.me/MaksimovWB) - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏\n\n"
        "üîß *–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*\n"
        "‚Ä¢ HTML5, CSS3, JavaScript\n"
        "‚Ä¢ Telegram Web Apps API\n"
        "‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n\n"
        "üìä *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ –†–∞—Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫\n"
        "‚Ä¢ –£—á–µ—Ç –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ WB\n"
        "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
        "üöÄ *–í–µ—Ä—Å–∏—è:* 1.0.0\n\n"
        "üìû *–°–≤—è–∑—å:* [@MaksimovWB](https://t.me/MaksimovWB)"
    )
    await message.answer(about_text)


@router.message(Command('check'))
async def check_command(message: Message) -> None:
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª –∏–∑ CHANNEL_ID."""
    user_id = message.from_user.id
    chat_display = CHANNEL_ID or '–Ω–µ –∑–∞–¥–∞–Ω'
    is_subscribed = await check_user_subscription(user_id)
    status = '‚úÖ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞' if is_subscribed else '‚ùå –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏'
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        f"–ö–∞–Ω–∞–ª: {chat_display}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n"
        f"–°—Ç–∞—Ç—É—Å: {status}"
    )


@router.message(F.web_app_data)
async def handle_web_app_data(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–∏—à–µ–¥—à–∏—Ö –∏–∑ Web App (Telegram Web Apps)."""
    try:
        data = json.loads(message.web_app_data.data)
        data_type = data.get('type')

        if data_type == 'unit_economics_results':
            results = data.get('data', {})
            message_text = data.get('message', '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞')

            await message.answer(message_text)

            user_info = format_user_info(message.from_user)
            print(f"Calculation shared by {user_info['display_name']}")

            admin_notification = (
                "üìä *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è —Ä–∞—Å—á–µ—Ç–æ–º!*\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_info['display_name']}\n"
                f"üÜî *ID:* `{user_info['id']}`\n"
                f"üïê *–í—Ä–µ–º—è:* {message.date.strftime('%d.%m.%Y %H:%M:%S')}\n"
                "üßÆ *–î–µ–π—Å—Ç–≤–∏–µ:* –ü–æ–¥–µ–ª–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞—Å—á–µ—Ç–∞"
            )
            await notify_admin(admin_notification)

        elif data_type == 'export_results':
            results = data.get('data', {})
            export_message = data.get('message', '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')

            await message.answer(export_message)

            try:
                json_data = json.dumps(results, ensure_ascii=False, indent=2)
                filename = (
                    "unit_economics_export_"
                    + (results.get('timestamp') or datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
                    .replace(':', '-').replace(' ', '_').replace(',', '')
                    + ".json"
                )

                document = BufferedInputFile(json_data.encode('utf-8'), filename=filename)
                await bot.send_document(message.chat.id, document, caption="üìé –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")

            except Exception as file_error:
                print(f"Error sending JSON file: {file_error}")
                await message.answer("üìä –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! (JSON —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

            user_info = format_user_info(message.from_user)
            print(f"Data exported by {user_info['display_name']}")

            admin_notification = (
                "üì§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ!*\n\n"
                f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_info['display_name']}\n"
                f"üÜî *ID:* `{user_info['id']}`\n"
                f"üïê *–í—Ä–µ–º—è:* {message.date.strftime('%d.%m.%Y %H:%M:%S')}\n"
                "üìä *–î–µ–π—Å—Ç–≤–∏–µ:* –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å—á–µ—Ç–∞\n"
                "üíæ *–î–∞–Ω–Ω—ã–µ:* JSON —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
            )
            await notify_admin(admin_notification)

    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as error:
        print(f"Error handling web app data: {error}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @MaksimovWB")


@router.callback_query(F.data.startswith('check_sub_'))
async def check_subscription_callback(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = callback.from_user.id
    is_subscribed = await check_user_subscription(user_id)

    try:
        if is_subscribed:
            # –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is not modified" –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            new_text = (
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏.\n"
                "–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä."
            )
            if callback.message.text != new_text:
                await callback.message.edit_text(new_text)
            await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
        else:
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                            url="https://t.me/MaksimovWB"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑",
                            callback_data=f"check_sub_{user_id}"
                        )
                    ]
                ]
            )
            new_text = (
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @MaksimovWB –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑'."
            )
            if callback.message.text != new_text:
                await callback.message.edit_text(new_text, reply_markup=markup)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ—Ç –∂–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É
                await callback.message.edit_reply_markup(reply_markup=markup)
            await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except TelegramBadRequest as error:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–≤–ø–∞–ª–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –µ—â—ë —Ä–∞–∑", show_alert=False)


@router.message()
async def handle_other_messages(message: Message) -> None:
    """–û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_id = message.from_user.id
    is_subscribed = await check_user_subscription(user_id)
    
    if not is_subscribed:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª",
                        url="https://t.me/MaksimovWB"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=f"check_sub_{user_id}"
                    )
                ]
            ]
        )
        await message.answer(
            "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @MaksimovWB",
            reply_markup=markup
        )
        return
    
    await message.answer(
        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/about - –û –±–æ—Ç–µ"
    )


async def main() -> None:
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏...")
    print(f"üåê Web App URL: {WEB_APP_URL}")
    print(f"üë®‚Äçüíª Admin ID: {ADMIN_CHAT_ID if ADMIN_CHAT_ID else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üì¢ Channel ID: {CHANNEL_ID if CHANNEL_ID else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")

    if ADMIN_CHAT_ID:
        startup_message = (
            "üöÄ *–ë–æ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∑–∞–ø—É—â–µ–Ω!*\n\n"
            "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n"
            "üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏ WB\n"
            f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
        )
        await notify_admin(startup_message)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
